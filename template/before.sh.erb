# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module


# Find available port to run server on
port=$(find_port)
app_type=<%= context.app_type %>
csrf_token=""

if [ <%= context.app_type %> = "jupyter" ]; then 

SALT="$(create_passwd 32)"
export password="$(create_passwd 32)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"
export CONFIG_FILE="${PWD}/config.py"
export JUPYTER_CONFIG_DIR="${PWD}"
  
# Generate Jupyter configuration file with secure file permissions
(
umask 077
cat > "${CONFIG_FILE}" << EOL
c.ServerApp.ip = '*'
c.ServerApp.port = ${port}
c.ServerApp.port_retries = 0
c.ServerApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.ServerApp.base_url = '/node/${host}/${port}/'
c.ServerApp.open_browser = False
c.ServerApp.allow_origin = '*'
c.ServerApp.root_dir = '${HOME}'
c.ServerApp.disable_check_xsrf = True
c.ServerApp.jpserver_extensions = {"jupyterlab": True}
c.NotebookApp.nbserver_extensions = {"jupyterlab": True}
EOL
)

### This is to setup Tensorboard WebProxyServer
export show_tb="hidden"
# find available port to run Tensorboard server on
export tb_port=$(find_port ${host})

else
  
# Define a password and export it for RStudio authentication
password="$(create_passwd 16)"
export RSTUDIO_PASSWORD="${password}"
# create CSRF token
csrf_token=<%= SecureRandom.uuid %>
echo "CSRF TOKEN"
echo $csrf_token

fi